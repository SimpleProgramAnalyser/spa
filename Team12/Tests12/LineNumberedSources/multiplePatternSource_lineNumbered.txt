procedure pattern {
1   pattern = x + 3 * (y - 3);
2   pattern = x + 3 * y - 3;
3   x = x + 3 * y - 3 * 4;
4   if (x + 3 * (y - 3) < 4 ) then { 
5		specialPattern = y - 3;
6		specialPattern1 = 3 * y - 3;
7		while (x < y) {
8			x = x + (3 * y - 3) * 4;
		}
	} else {
9		constantAssignment = 100 + 10000 % 1000;
10		constAssignmentWithBrackets = (100 + 10000) % 1000;
	}
11	y = pattern * specialPattern + 100;
12	specialPattern = (x + 3 * y - 3) * (100 + 10000 % 1000);
13	if (specialPattern < 3) then {
14		y = pattern * specialPattern + 100;
	} else {
15		read y;
16		while (100 + (10000 % 1000) < 0) {
17			print pattern;
18			specialPatternAssignment = x + y % z * (x - y);
		}
	}
}

procedure pattern2 {
19	specialPatternAssignment = x + y % (z * x - y);
20	while (x + 3 * y > v * 9) {
21		if (100 + 10000 % 1000 >= 90) then {
22			while (x + 3 * (y - 3) == v * 9) {
23				call pattern;
24				constAssignmentWithBrackets = (10 - 1000 * 34) % 300;
			}
		} else {
25			y = y - 3;
		}
	}
26	if ( 100 + 10000 != y) then {
27		basicAss = 3 * y;
	} else {
28		while (3 * y < 0) {
29			specialPatternAssignment = x + y % (z * x - y);	
30			while ((!(z * x - y > 0))) {
31				call pattern;
			}
		}
	}
}

procedure pattern3 {
32	specialCondition = 100 + (10000 % 1000);
33	while ((!((100 + 10000) % 1000 <= 0)) && ((z * x) / 4 < 3)) {
34		read y;
	}
35	if ((100 + 10000 > 0) && ((!(z * x >= 3)) && (specialPatternAssignment < 9))) then {
36		print x;
	} else {
37		print pattern;
38		while (!(3 * y == 0)) {
39			print pattern;
40			while ((!(z * x - y != 0))) {
41				call pattern;
			}
		}
	}
42	while ((!(100 + 10000 == 0)) || (z * x != 3)) {
43		print pattern;
44		x = 10 * y;
	}
45	if ((100 + 10000 != 0) || (!(y >= 0 ))) then {
46		print pattern;
47		specialPatternAssignment = x + y % z * (x - y);
	} else {
48		print pattern;
49		y = y;
	}
50	while ((!(a <= 0)  ) && (  (!(  b == 3  )) || (!  (c * 3 != 3)))) {
51		print pattern;
	}
}
